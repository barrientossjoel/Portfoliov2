{"version":3,"sources":["../../src/routing/register.ts","../../src/routing/index.ts","../../src/routing/hmr.ts"],"sourcesContent":["import { mkdirSync, readFileSync, rmSync, writeFileSync } from \"node:fs\";\nimport { dirname, join, relative, resolve } from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport type {\n\tAstroIntegrationLogger,\n\tHookParameters,\n\tInjectedRoute,\n} from \"astro\";\nimport { defineUtility } from \"astro-integration-kit\";\nimport { addPageDir } from \"astro-pages\";\nimport { AstroError } from \"astro/errors\";\nimport { withLeadingSlash } from \"ufo\";\nimport { normalizePath } from \"vite\";\nimport type { Options } from \"../options.js\";\nimport type { Route } from \"../types.js\";\nimport { ROUTES_DIR } from \"./index.js\";\n\nconst isPrerendered = (str: string) => {\n\tconst match = str.match(/export const prerender = (\\w+)/);\n\tif (match) {\n\t\treturn match[1] === \"true\";\n\t}\n\treturn undefined;\n};\n\nconst getPages = (\n\tparams: HookParameters<\"astro:config:setup\">,\n): Array<InjectedRoute> => {\n\t// @ts-ignore TODO: update astro-apges when types are fixed\n\treturn Object.entries(addPageDir({ ...params, dir: ROUTES_DIR }).pages).map(\n\t\t([pattern, entrypoint]) => ({ pattern, entrypoint }),\n\t);\n};\n\nconst getPaths = defineUtility(\"astro:config:setup\")(({ config }) => {\n\tconst routesDir = fileURLToPath(new URL(ROUTES_DIR, config.srcDir));\n\tconst entrypointsDir = resolve(\n\t\tfileURLToPath(config.root),\n\t\t\"./.astro/astro-i18n/entrypoints\",\n\t);\n\n\treturn {\n\t\troutesDir,\n\t\tentrypointsDir,\n\t};\n});\n\nconst generateRoute = (\n\t{ strategy, defaultLocale, locales, pages }: Options,\n\tlocale: string,\n\tpage: InjectedRoute,\n\tpaths: ReturnType<typeof getPaths>,\n\tlogger: AstroIntegrationLogger,\n): Route => {\n\tconst getPattern = () => {\n\t\tconst isDefaultLocale = locale === defaultLocale;\n\t\tconst prefix =\n\t\t\tisDefaultLocale && strategy === \"prefixExceptDefault\" ? \"\" : `/${locale}`;\n\t\tconst suffix = withLeadingSlash(\n\t\t\tisDefaultLocale\n\t\t\t\t? page.pattern\n\t\t\t\t: pages?.[page.pattern]?.[locale] ?? page.pattern,\n\t\t);\n\t\treturn prefix + suffix;\n\t};\n\n\tconst transformContent = (entrypoint: string) => {\n\t\tconst updateRelativeImports = (\n\t\t\toriginalPath: string,\n\t\t\tcurrentFilePath: string,\n\t\t\tnewFilePath: string,\n\t\t) => {\n\t\t\tconst absolutePath = resolve(dirname(currentFilePath), originalPath);\n\t\t\tconst relativePath = relative(dirname(newFilePath), absolutePath);\n\t\t\treturn normalizePath(relativePath);\n\t\t};\n\n\t\tmkdirSync(dirname(entrypoint), { recursive: true });\n\n\t\tlet content = readFileSync(page.entrypoint, \"utf-8\");\n\n\t\tif (page.entrypoint.endsWith(\".astro\")) {\n\t\t\ttry {\n\t\t\t\tcontent = content\n\t\t\t\t\t.replaceAll(\"getLocalePlaceholder()\", `\"${locale}\"`)\n\t\t\t\t\t.replaceAll(\n\t\t\t\t\t\t\"getLocalesPlaceholder()\",\n\t\t\t\t\t\t`[${locales.map((locale) => `\"${locale}\"`).join(\", \")}]`,\n\t\t\t\t\t)\n\t\t\t\t\t.replaceAll(\"getDefaultLocalePlaceholder()\", `\"${defaultLocale}\"`);\n\n\t\t\t\tlet [, frontmatter, ...body] = content.split(\"---\");\n\t\t\t\tif (!frontmatter) {\n\t\t\t\t\tthrow new Error(\"No frontmatter found\");\n\t\t\t\t}\n\t\t\t\t// Handle static imports\n\t\t\t\tfrontmatter = frontmatter.replace(\n\t\t\t\t\t/import\\s+([\\s\\S]*?)\\s+from\\s+['\"](.+?)['\"]/g,\n\t\t\t\t\t(_match, p1: string, p2: string) => {\n\t\t\t\t\t\tconst updatedPath =\n\t\t\t\t\t\t\tp2.startsWith(\"./\") || p2.startsWith(\"../\")\n\t\t\t\t\t\t\t\t? updateRelativeImports(p2, page.entrypoint, entrypoint)\n\t\t\t\t\t\t\t\t: p2;\n\t\t\t\t\t\treturn `import ${p1} from '${updatedPath}'`;\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\t// Handle dynamic imports\n\t\t\t\tfrontmatter = frontmatter.replace(\n\t\t\t\t\t/import\\s*\\(\\s*['\"](.+?)['\"]\\s*\\)/g,\n\t\t\t\t\t(_match, p1: string) => {\n\t\t\t\t\t\tconst updatedPath =\n\t\t\t\t\t\t\tp1.startsWith(\"./\") || p1.startsWith(\"../\")\n\t\t\t\t\t\t\t\t? updateRelativeImports(p1, page.entrypoint, entrypoint)\n\t\t\t\t\t\t\t\t: p1;\n\t\t\t\t\t\treturn `import('${updatedPath}')`;\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tcontent = `---${frontmatter}---${body.join(\"---\")}`;\n\t\t\t} catch (err) {\n\t\t\t\tthrow new AstroError(\n\t\t\t\t\t`An error occured while transforming \"${page.entrypoint}\".`,\n\t\t\t\t\t\"Make sure it has a valid frontmatter, even empty\",\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\twriteFileSync(entrypoint, content, \"utf-8\");\n\n\t\treturn {\n\t\t\tprerender: isPrerendered(content),\n\t\t};\n\t};\n\n\tconst getParams = (pattern: string) => {\n\t\tconst params: Array<string> = [];\n\n\t\tconst matches = pattern.match(/\\[([^\\]]+)]/g);\n\t\tif (matches) {\n\t\t\tfor (const match of matches) {\n\t\t\t\tparams.push(match.slice(1, -1));\n\t\t\t}\n\t\t}\n\n\t\treturn params;\n\t};\n\n\tconst pattern = getPattern();\n\tconst entrypoint = join(\n\t\tpaths.entrypointsDir,\n\t\tlocale,\n\t\tnormalizePath(relative(paths.routesDir, page.entrypoint)),\n\t);\n\tconst { prerender } = transformContent(entrypoint);\n\n\tlogger.info(`Injecting \"${pattern}\" route`);\n\treturn {\n\t\tlocale,\n\t\tparams: getParams(pattern),\n\t\tpattern: page.pattern,\n\t\tinjectedRoute: {\n\t\t\tpattern,\n\t\t\tentrypoint,\n\t\t\t...(prerender ? { prerender } : {}),\n\t\t},\n\t};\n};\n\nexport const registerRoutes = (\n\tparams: HookParameters<\"astro:config:setup\">,\n\toptions: Options,\n\tlogger: AstroIntegrationLogger,\n) => {\n\tconst { config, injectRoute } = params;\n\tconst { locales } = options;\n\tlogger.info(\"Starting routes injection...\");\n\n\tconst paths = getPaths(params);\n\trmSync(paths.entrypointsDir, { recursive: true, force: true });\n\tlogger.info(\n\t\t`Cleaned \"${normalizePath(\n\t\t\trelative(fileURLToPath(config.root), paths.entrypointsDir),\n\t\t)}\" directory`,\n\t);\n\n\tconst routes: Array<Route> = [];\n\tconst pages = getPages(params);\n\n\tfor (const locale of locales) {\n\t\tfor (const page of pages) {\n\t\t\troutes.push(generateRoute(options, locale, page, paths, logger));\n\t\t}\n\t}\n\n\tfor (const { injectedRoute } of routes) {\n\t\tinjectRoute(injectedRoute);\n\t}\n\n\treturn { routes };\n};\n","import { defineUtility } from \"astro-integration-kit\";\nimport type { Options } from \"../options.js\";\nimport { handleRoutesHMR } from \"./hmr.js\";\nimport { registerRoutes } from \"./register.js\";\n\nexport const ROUTES_DIR = \"routes\";\nconst LOGGER_LABEL = \"astro-i18n/routing\";\n\nexport const handleRouting = defineUtility(\"astro:config:setup\")(\n\t(params, options: Options) => {\n\t\tconst logger = params.logger.fork(LOGGER_LABEL);\n\n\t\thandleRoutesHMR(params, logger);\n\t\tconst { routes } = registerRoutes(params, options, logger);\n\n\t\treturn { routes };\n\t},\n);\n","import { join, relative } from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport type { AstroIntegrationLogger } from \"astro\";\nimport { defineUtility, watchDirectory } from \"astro-integration-kit\";\nimport { normalizePath } from \"vite\";\nimport { ROUTES_DIR } from \"./index.js\";\n\nexport const handleRoutesHMR = defineUtility(\"astro:config:setup\")(\n\t(params, logger: AstroIntegrationLogger) => {\n\t\tconst { config } = params;\n\n\t\tconst dir = normalizePath(join(fileURLToPath(config.srcDir), ROUTES_DIR));\n\t\twatchDirectory(params, dir);\n\t\tlogger.info(\n\t\t\t`Registered watcher for \"${normalizePath(\n\t\t\t\trelative(fileURLToPath(params.config.root), dir),\n\t\t\t)}\" directory`,\n\t\t);\n\t},\n);\n"],"mappings":"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","names":["mkdirSync","readFileSync","rmSync","writeFileSync","dirname","join","relative","resolve","fileURLToPath","defineUtility","addPageDir","AstroError","withLeadingSlash","normalizePath","defineUtility","join","relative","fileURLToPath","defineUtility","watchDirectory","normalizePath","handleRoutesHMR","defineUtility","params","logger","config","dir","normalizePath","join","fileURLToPath","ROUTES_DIR","watchDirectory","relative","ROUTES_DIR","LOGGER_LABEL","handleRouting","defineUtility","params","options","logger","handleRoutesHMR","routes","registerRoutes","isPrerendered","str","match","getPages","params","addPageDir","ROUTES_DIR","pattern","entrypoint","getPaths","defineUtility","config","routesDir","fileURLToPath","entrypointsDir","resolve","generateRoute","strategy","defaultLocale","locales","pages","locale","page","paths","logger","getPattern","isDefaultLocale","prefix","suffix","withLeadingSlash","transformContent","updateRelativeImports","originalPath","currentFilePath","newFilePath","absolutePath","dirname","relativePath","relative","normalizePath","mkdirSync","content","readFileSync","frontmatter","body","_match","p1","p2","updatedPath","AstroError","writeFileSync","getParams","matches","join","prerender","registerRoutes","options","injectRoute","rmSync","routes","injectedRoute"]}