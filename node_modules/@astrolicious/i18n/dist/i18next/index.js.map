{"version":3,"sources":["../../src/i18next/index.ts","../../src/i18next/namespaces.ts","../../src/i18next/resources.ts"],"sourcesContent":["import { join, relative } from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport { defineUtility, watchDirectory } from \"astro-integration-kit\";\nimport { normalizePath } from \"vite\";\nimport type { Options } from \"../options.js\";\nimport { getNamespaces } from \"./namespaces.js\";\nimport { getResources } from \"./resources.js\";\n\nconst getPaths = (root: URL, options: Options) => {\n\tconst localesDir = normalizePath(\n\t\tfileURLToPath(new URL(options.localesDir, root)),\n\t);\n\tconst defaultLocalesDir = join(localesDir, options.defaultLocale);\n\n\treturn {\n\t\tlocalesDir,\n\t\tdefaultLocalesDir,\n\t};\n};\n\nconst LOGGER_LABEL = \"astro-i18n/i18next\";\n\nexport const handleI18next = defineUtility(\"astro:config:setup\")(\n\t(params, options: Options) => {\n\t\tconst logger = params.logger.fork(LOGGER_LABEL);\n\n\t\tconst paths = getPaths(params.config.root, options);\n\t\twatchDirectory(params, paths.localesDir);\n\t\tlogger.info(\n\t\t\t`Registered watcher for \"${normalizePath(\n\t\t\t\trelative(fileURLToPath(params.config.root), paths.localesDir),\n\t\t\t)}\" directory`,\n\t\t);\n\n\t\tconst { namespaces } = getNamespaces(\n\t\t\tpaths.defaultLocalesDir,\n\t\t\toptions.defaultNamespace,\n\t\t\tlogger,\n\t\t);\n\t\tconst resources = getResources(logger, options, paths.localesDir);\n\t\tconst dtsContent = `\n\ttype Resources = ${JSON.stringify(resources[options.defaultLocale] ?? {})}\n\t\n    declare module \"i18next\" {\n      interface CustomTypeOptions {\n        defaultNS: \"${options.defaultNamespace}\";\n        resources: Resources;\n      }\n    }\n    export {}\n    `;\n\n\t\treturn {\n\t\t\tnamespaces,\n\t\t\tresources,\n\t\t\tdtsContent,\n\t\t};\n\t},\n);\n","import { existsSync, readdirSync } from \"node:fs\";\nimport { basename, extname } from \"node:path\";\nimport type { AstroIntegrationLogger } from \"astro\";\n\nexport const getNamespaces = (\n\tdefaultLocalesDir: string,\n\tdefaultNamespace: string,\n\tlogger: AstroIntegrationLogger,\n) => {\n\tconst importsData: Array<{\n\t\tnamespaceName: string;\n\t\tfileName: string;\n\t}> = [];\n\n\tif (existsSync(defaultLocalesDir)) {\n\t\tconst filenames = readdirSync(defaultLocalesDir).filter((f) =>\n\t\t\tf.endsWith(\".json\"),\n\t\t);\n\t\tfor (const fileName of filenames) {\n\t\t\timportsData.push({\n\t\t\t\tnamespaceName: basename(fileName, extname(fileName)),\n\t\t\t\tfileName,\n\t\t\t});\n\t\t}\n\t}\n\n\tconst namespaces = importsData.map((e) => e.namespaceName);\n\tlogger.info(\n\t\t`Detected namespaces: ${namespaces.map((ns) => `\"${ns}\"`).join(\",\")}`,\n\t);\n\tif (!namespaces.includes(defaultNamespace)) {\n\t\tlogger.warn(`Default namespace \"${defaultNamespace}\" is not detected`);\n\t}\n\n\treturn {\n\t\tnamespaces,\n\t};\n};\n","import { existsSync, readFileSync, readdirSync } from \"node:fs\";\nimport { basename, extname, join } from \"node:path\";\nimport type { AstroIntegrationLogger } from \"astro\";\nimport { normalizePath } from \"vite\";\nimport type { Options } from \"../options.js\";\nimport type { I18nextConfig } from \"../types.js\";\n\nexport const getResources = (\n\tlogger: AstroIntegrationLogger,\n\t{ locales }: Options,\n\tlocalesDir: string,\n) => {\n\tconst resources: I18nextConfig[\"resources\"] = {};\n\n\tconst localesDirs = locales\n\t\t.map((locale) => ({\n\t\t\tlocale,\n\t\t\tdir: normalizePath(join(localesDir, locale)),\n\t\t}))\n\t\t.filter((e) => existsSync(e.dir));\n\n\tfor (const { locale, dir } of localesDirs) {\n\t\tconst filenames = readdirSync(dir).filter((f) => f.endsWith(\".json\"));\n\n\t\tfor (const fileName of filenames) {\n\t\t\tconst path = normalizePath(join(dir, fileName));\n\t\t\ttry {\n\t\t\t\tconst content = JSON.parse(readFileSync(path, \"utf-8\"));\n\n\t\t\t\tresources[locale] ??= {};\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: fallback is set above\n\t\t\t\tresources[locale]![basename(fileName, extname(fileName))] = content;\n\t\t\t} catch (err) {\n\t\t\t\tlogger.warn(`Can't parse \"${path}\", skipping.`);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.info(\n\t\t`${Object.keys(Object.values(resources)).length} resources registered`,\n\t);\n\treturn resources;\n};\n"],"mappings":"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","names":["join","relative","fileURLToPath","defineUtility","watchDirectory","normalizePath","existsSync","readdirSync","basename","extname","getNamespaces","defaultLocalesDir","defaultNamespace","logger","importsData","filenames","f","fileName","namespaces","ns","existsSync","readFileSync","readdirSync","basename","extname","join","normalizePath","getResources","logger","locales","localesDir","resources","localesDirs","locale","dir","filenames","f","fileName","path","content","getPaths","root","options","localesDir","normalizePath","fileURLToPath","defaultLocalesDir","join","LOGGER_LABEL","handleI18next","defineUtility","params","logger","paths","watchDirectory","relative","namespaces","getNamespaces","resources","getResources","dtsContent"]}