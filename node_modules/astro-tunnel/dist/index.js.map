{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { dirname, join } from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport type { AstroIntegration } from \"astro\";\nimport { startTunnel } from \"untun\";\nimport type { Tunnel, TunnelOptions } from \"untun\";\n\ntype AstroTunnelOptions = TunnelOptions;\n\nexport default function createAstroTunnelIntegration(\n\toptions: AstroTunnelOptions = {\n\t\tport: 4321,\n\t\thostname: \"localhost\",\n\t\tprotocol: \"http\",\n\t\tverifyTLS: false,\n\t\tacceptCloudflareNotice: false,\n\t},\n): AstroIntegration {\n\treturn {\n\t\tname: \"astro-tunnel\",\n\t\thooks: {\n\t\t\t\"astro:config:setup\": ({ addDevToolbarApp }) => {\n\t\t\t\tconst __filename = fileURLToPath(import.meta.url);\n\t\t\t\tconst __dirname = dirname(__filename);\n\t\t\t\taddDevToolbarApp(join(__dirname, \"./astro-tunnel.js\"));\n\t\t\t},\n\t\t\t\"astro:server:setup\": ({ server }) => {\n\t\t\t\tlet tunnel: Tunnel | undefined;\n\n\t\t\t\tserver.hot.on(\n\t\t\t\t\t\"astro-dev-toolbar:astro-tunnel:initialized\",\n\t\t\t\t\tasync () => {\n\t\t\t\t\t\t// Send the tunnel URL to the client when the app is initialized\n\t\t\t\t\t\tserver.hot.send(\"astro-tunnel:tunnel-url\", {\n\t\t\t\t\t\t\turl: await tunnel?.getURL(),\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tserver.hot.on(\"astro-dev-toolbar:astro-tunnel:toggled\", async () => {\n\t\t\t\t\t// Send the tunnel URL to the client when the user clicks on the app icon\n\t\t\t\t\tserver.hot.send(\"astro-tunnel:tunnel-url\", {\n\t\t\t\t\t\turl: await tunnel?.getURL(),\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tserver.hot.on(\n\t\t\t\t\t\"astro-tunnel:toggled\",\n\t\t\t\t\tasync (data: { checked: boolean }) => {\n\t\t\t\t\t\t// Toggle the tunnel when the user toggles the switch\n\t\t\t\t\t\tif (data.checked) {\n\t\t\t\t\t\t\ttunnel = await startTunnel(options);\n\t\t\t\t\t\t\tserver.hot.send(\"astro-tunnel:tunnel-url\", {\n\t\t\t\t\t\t\t\turl: await tunnel?.getURL(),\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tawait tunnel?.close();\n\t\t\t\t\t\t\tserver.hot.send(\"astro-tunnel:tunnel-url\", {\n\t\t\t\t\t\t\t\turl: undefined,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\ttunnel = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t};\n}\n"],"mappings":";AAAA,SAAS,SAAS,YAAY;AAC9B,SAAS,qBAAqB;AAE9B,SAAS,mBAAmB;AAKb,SAAR,6BACN,UAA8B;AAAA,EAC7B,MAAM;AAAA,EACN,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,wBAAwB;AACzB,GACmB;AACnB,SAAO;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,MACN,sBAAsB,CAAC,EAAE,iBAAiB,MAAM;AAC/C,cAAM,aAAa,cAAc,YAAY,GAAG;AAChD,cAAM,YAAY,QAAQ,UAAU;AACpC,yBAAiB,KAAK,WAAW,mBAAmB,CAAC;AAAA,MACtD;AAAA,MACA,sBAAsB,CAAC,EAAE,OAAO,MAAM;AACrC,YAAI;AAEJ,eAAO,IAAI;AAAA,UACV;AAAA,UACA,YAAY;AAEX,mBAAO,IAAI,KAAK,2BAA2B;AAAA,cAC1C,KAAK,MAAM,QAAQ,OAAO;AAAA,YAC3B,CAAC;AAAA,UACF;AAAA,QACD;AAEA,eAAO,IAAI,GAAG,0CAA0C,YAAY;AAEnE,iBAAO,IAAI,KAAK,2BAA2B;AAAA,YAC1C,KAAK,MAAM,QAAQ,OAAO;AAAA,UAC3B,CAAC;AAAA,QACF,CAAC;AAED,eAAO,IAAI;AAAA,UACV;AAAA,UACA,OAAO,SAA+B;AAErC,gBAAI,KAAK,SAAS;AACjB,uBAAS,MAAM,YAAY,OAAO;AAClC,qBAAO,IAAI,KAAK,2BAA2B;AAAA,gBAC1C,KAAK,MAAM,QAAQ,OAAO;AAAA,cAC3B,CAAC;AAAA,YACF,OAAO;AACN,oBAAM,QAAQ,MAAM;AACpB,qBAAO,IAAI,KAAK,2BAA2B;AAAA,gBAC1C,KAAK;AAAA,cACN,CAAC;AACD,uBAAS;AAAA,YACV;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;","names":[]}