{"version":3,"sources":["../../src/sitemap/utils.ts","../../src/sitemap/generate-sitemap.ts"],"sourcesContent":["import type { AstroConfig, RouteData } from \"astro\";\nimport { AstroError } from \"astro/errors\";\nimport type { ZodError } from \"astro/zod\";\nimport type { Route } from \"./integration.js\";\n\nconst STATUS_CODE_PAGES = new Set([\"404\", \"500\"]);\n\nexport const isStatusCodePage = (_pathname: string): boolean => {\n\tlet pathname = _pathname;\n\tif (pathname.endsWith(\"/\")) {\n\t\tpathname = pathname.slice(0, -1);\n\t}\n\tconst end = pathname.split(\"/\").pop() ?? \"\";\n\treturn STATUS_CODE_PAGES.has(end);\n};\n\nexport const formatConfigErrorMessage = (err: ZodError) => {\n\tconst errorList = err.issues.map(\n\t\t(issue) => ` ${issue.path.join(\".\")}  ${`${issue.message}.`}`,\n\t);\n\treturn errorList.join(\"\\n\");\n};\n\nexport const createImpossibleError = (message: string) =>\n\tnew AstroError(\n\t\tmessage,\n\t\t\"Please open an issue on GitHub at https://github.com/astrolicious/i18n/issues\",\n\t);\n\nexport const getPathnameFromRouteData = ({ segments }: RouteData) => {\n\tconst pathname = segments\n\t\t.map((segment) => {\n\t\t\treturn segment\n\t\t\t\t.map((rp) => (rp.dynamic ? `[${rp.content}]` : rp.content))\n\t\t\t\t.join(\"\");\n\t\t})\n\t\t.join(\"/\");\n\n\treturn `/${pathname}`;\n};\n\nexport const normalizeDynamicParams = (\n\t_params: Route[\"sitemapOptions\"][number][\"dynamicParams\"],\n) => {\n\tif (!_params) {\n\t\treturn [];\n\t}\n\n\tif (Array.isArray(_params)) {\n\t\treturn _params;\n\t}\n\n\treturn Object.entries(_params).map(([locale, params]) => ({\n\t\tlocale,\n\t\tparams,\n\t}));\n};\n\nexport const handleTrailingSlash = (url: string, config: AstroConfig) => {\n\tif (config.trailingSlash === \"never\") {\n\t\treturn url;\n\t}\n\tif (config.build.format === \"directory\" && !url.endsWith(\"/\")) {\n\t\treturn `${url}/`;\n\t}\n\treturn url;\n};\n","import type { AstroConfig } from \"astro\";\nimport type { LinkItem, SitemapItemLoose } from \"sitemap\";\nimport type { Route } from \"./integration.js\";\nimport type { SitemapOptions } from \"./options.js\";\nimport {\n\tcreateImpossibleError,\n\thandleTrailingSlash,\n\tnormalizeDynamicParams,\n} from \"./utils.js\";\n\ntype NoUndefinedField<T> = {\n\t[P in keyof T]-?: NonNullable<T[P]>;\n};\n\n/** Construct sitemap.xml given a set of URLs */\nexport function generateSitemap(\n\troutes: Array<Route>,\n\t_finalSiteUrl: string,\n\topts: SitemapOptions,\n\tconfig: AstroConfig,\n) {\n\tconst { changefreq, priority, lastmod: lastmodSrc } = opts;\n\tconst lastmod = lastmodSrc?.toISOString();\n\n\tconst getLinksFromRoute = (route: NoUndefinedField<Route>, page: string) => {\n\t\tif (!route.route) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst links: Array<LinkItem> = [];\n\n\t\tconst equivalentRoutes = routes.filter(\n\t\t\t(e) =>\n\t\t\t\te.route &&\n\t\t\t\te.route.pattern === route.route.pattern &&\n\t\t\t\te.route.locale !== route.route.locale,\n\t\t) as Array<NoUndefinedField<Route>>;\n\n\t\tlinks.push({\n\t\t\tlang: route.route.locale,\n\t\t\turl: page,\n\t\t});\n\n\t\t// Handle static links\n\t\tif (route.routeData.params.length === 0) {\n\t\t\tfor (const equivalentRoute of equivalentRoutes) {\n\t\t\t\tlinks.push({\n\t\t\t\t\tlang: equivalentRoute.route.locale,\n\t\t\t\t\turl: handleTrailingSlash(\n\t\t\t\t\t\t`${new URL(page).origin}${\n\t\t\t\t\t\t\tequivalentRoute.route.injectedRoute.pattern\n\t\t\t\t\t\t}`,\n\t\t\t\t\t\tconfig,\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn [...links].sort((a, b) =>\n\t\t\t\ta.lang.localeCompare(b.lang, \"en\", { numeric: true }),\n\t\t\t);\n\t\t}\n\n\t\tconst index = route.pages.indexOf(page);\n\t\tconst sitemapOptions = route.sitemapOptions.filter(\n\t\t\t(e) =>\n\t\t\t\te.dynamicParams &&\n\t\t\t\t(Array.isArray(e.dynamicParams)\n\t\t\t\t\t? e.dynamicParams\n\t\t\t\t\t: Object.entries(e.dynamicParams)\n\t\t\t\t).length > 0,\n\t\t)[index];\n\t\tif (!sitemapOptions || !sitemapOptions.dynamicParams) {\n\t\t\treturn [];\n\t\t}\n\n\t\tfor (const equivalentRoute of equivalentRoutes) {\n\t\t\tconst options = normalizeDynamicParams(sitemapOptions.dynamicParams).find(\n\t\t\t\t(e) => e.locale === equivalentRoute.route.locale,\n\t\t\t);\n\n\t\t\tif (!options) {\n\t\t\t\t// A dynamic route is not required to always have an equivalent in another language eg.\n\t\t\t\t// en: /blog/a\n\t\t\t\t// fr: /fr/le-blog/b\n\t\t\t\t// it: none\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet newPage = equivalentRoute.route.injectedRoute.pattern;\n\t\t\tfor (const [key, value] of Object.entries(options.params)) {\n\t\t\t\tif (!value) {\n\t\t\t\t\tthrow createImpossibleError(\n\t\t\t\t\t\t\"This situation should never occur (value is not set)\",\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tnewPage = newPage.replace(`[${key}]`, value);\n\t\t\t}\n\t\t\tnewPage = handleTrailingSlash(\n\t\t\t\t`${new URL(page).origin}${newPage}`,\n\t\t\t\tconfig,\n\t\t\t);\n\t\t\tlinks.push({\n\t\t\t\tlang: equivalentRoute.route.locale,\n\t\t\t\turl: newPage,\n\t\t\t});\n\t\t}\n\t\treturn [...links].sort((a, b) =>\n\t\t\ta.lang.localeCompare(b.lang, \"en\", { numeric: true }),\n\t\t);\n\t};\n\n\tconst urlData: Array<SitemapItemLoose> = [];\n\tfor (const route of routes) {\n\t\tfor (const page of route.pages) {\n\t\t\tconst links: Array<LinkItem> = [];\n\t\t\tif (route.route) {\n\t\t\t\tconst _links = getLinksFromRoute(\n\t\t\t\t\t// Required because TS\n\t\t\t\t\t{\n\t\t\t\t\t\t...route,\n\t\t\t\t\t\troute: route.route,\n\t\t\t\t\t},\n\t\t\t\t\tpage,\n\t\t\t\t);\n\t\t\t\tlinks.push(..._links);\n\t\t\t}\n\n\t\t\tconst obj: SitemapItemLoose = {\n\t\t\t\turl: page,\n\t\t\t\tlinks,\n\t\t\t};\n\n\t\t\t// TODO: get from sitemap options first\n\t\t\tif (changefreq) {\n\t\t\t\tObject.assign(obj, { changefreq });\n\t\t\t}\n\t\t\tif (lastmod) {\n\t\t\t\tObject.assign(obj, { lastmod });\n\t\t\t}\n\t\t\tif (priority) {\n\t\t\t\tObject.assign(obj, { priority });\n\t\t\t}\n\n\t\t\turlData.push(obj);\n\t\t}\n\t}\n\n\treturn [...urlData].sort((a, b) =>\n\t\ta.url.localeCompare(b.url, \"en\", { numeric: true }),\n\t);\n}\n"],"mappings":"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","names":["AstroError","createImpossibleError","message","AstroError","normalizeDynamicParams","_params","locale","params","handleTrailingSlash","url","config","generateSitemap","routes","_finalSiteUrl","opts","config","changefreq","priority","lastmodSrc","lastmod","getLinksFromRoute","route","page","links","equivalentRoutes","e","equivalentRoute","handleTrailingSlash","a","b","index","sitemapOptions","options","normalizeDynamicParams","newPage","key","value","createImpossibleError","urlData","_links","obj"]}