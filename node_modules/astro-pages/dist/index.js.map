{"version":3,"sources":["../src/utility.ts","../src/integration.ts","../src/index.ts"],"sourcesContent":["import { existsSync } from \"node:fs\";\nimport { dirname, extname, isAbsolute, resolve } from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport type { HookParameters } from \"astro\";\nimport { AstroError } from \"astro/errors\";\nimport fg from \"fast-glob\";\n\ntype Prettify<T> = { [K in keyof T]: T[K] } & {};\n\nexport type Option = Prettify<{\n\tlog?: \"verbose\" | \"minimal\" | boolean | null | undefined;\n\tcwd?: string;\n\tdir: string;\n\tglob?: string | string[];\n\tpattern?: (context: {\n\t\tcwd: string;\n\t\tdir: string;\n\t\tentrypoint: string;\n\t\text: string;\n\t\tpattern: string;\n\t}) => string;\n}>;\n\nexport type IntegrationOption = Prettify<\n\tOption & {\n\t\tconfig: HookParameters<\"astro:config:setup\">[\"config\"];\n\t\tlogger: HookParameters<\"astro:config:setup\">[\"logger\"];\n\t}\n>;\n\nexport const GLOB_PAGES = \"**.{astro,ts,js}\";\n\nexport default function (options: IntegrationOption) {\n\tlet {\n\t\tdir,\n\t\tcwd,\n\t\tglob = GLOB_PAGES,\n\t\tpattern: transformer,\n\t\tlog,\n\t\tconfig,\n\t\tlogger,\n\t} = options;\n\n\tconst srcDir = fileURLToPath(config.srcDir.toString());\n\n\tcwd = stringToDir(options, \"cwd\", srcDir, cwd);\n\n\tdir = stringToDir(options, \"dir\", cwd, dir);\n\n\t// Handle glob default including empty array case\n\tif (Array.isArray(glob) && glob.length <= 0) {\n\t\tglob = GLOB_PAGES;\n\t}\n\n\t// Glob filepaths of pages from dir\n\tconst entrypoints = fg.sync(\n\t\t[\n\t\t\tglob,\n\t\t\t\"!**/_*\", // Ignore files according to the official routing convention\n\t\t\t\"!**/_**/*\", // Ignore directories according to the official routing convention\n\t\t\t\"!**/content/config.ts\", // Ignore content collection config\n\t\t\t\"!**/node_modules\", // Ignore node modules\n\t\t\t\"!**/*.(d|wasm).(ts|js)\", // Ignore sub extensions of possible API routes\n\t\t].flat(),\n\t\t{ cwd: dir, absolute: true },\n\t);\n\n\t// Turn entrypoints into patterns ('/blog', '/about/us')\n\tconst pages: Record<string, string> = {};\n\n\tfor (const entrypoint of entrypoints) {\n\t\tconst pattern =\n\t\t\tentrypoint // Transform absolute filepath into a route pattern:\n\t\t\t\t.slice(dir.length, -extname(entrypoint).length) //   Get path between page dir and file extension\n\t\t\t\t.replace(/(\\\\|\\/)index$/, \"\") || //   Remove 'index' from end of path\n\t\t\t\"/\"; //   Default to root when replace is falsy\n\n\t\tpages[pattern] = entrypoint;\n\t}\n\n\tfunction injectPages(\n\t\tinjectRoute: HookParameters<\"astro:config:setup\">[\"injectRoute\"],\n\t) {\n\t\t// Check if directory is pointing to Astro's page directory\n\t\tif (dir === resolve(srcDir, \"pages\")) {\n\t\t\tthrow new AstroError(\n\t\t\t\t`Failed to inject pages! Directory cannot point to Astro's 'pages' directory`,\n\t\t\t\tdir,\n\t\t\t);\n\t\t}\n\n\t\tif (log) logger.info(\"Adding pages: \" + dir);\n\n\t\tfor (let [pattern, entrypoint] of Object.entries(pages)) {\n\t\t\t// Transform pattern if available\n\t\t\tif (transformer) {\n\t\t\t\tpattern = transformer({\n\t\t\t\t\tdir,\n\t\t\t\t\tcwd: cwd!,\n\t\t\t\t\tentrypoint,\n\t\t\t\t\text: extname(entrypoint),\n\t\t\t\t\tpattern,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Handle falsy patterns from transformer\n\t\t\tif (!pattern) {\n\t\t\t\tif (log === \"verbose\")\n\t\t\t\t\tlogger.warn(`Invalid pattern, skipping entrypoint: ${entrypoint}`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (log === \"verbose\") logger.info(\"Injecting pattern: \" + pattern);\n\n\t\t\tinjectRoute({\n\t\t\t\t// @ts-expect-error \"Object literal may only specify known properties\"\n\t\t\t\tentryPoint: entrypoint,\n\t\t\t\tentrypoint,\n\t\t\t\tpattern,\n\t\t\t});\n\t\t}\n\t}\n\n\treturn {\n\t\tpages,\n\t\tinjectPages,\n\t};\n}\n\nfunction stringToDir(\n\toption: IntegrationOption,\n\tkey: \"dir\" | \"cwd\",\n\tbase: string,\n\tpath?: string,\n): string {\n\tconst { log, logger } = option;\n\n\t// Check if path is string\n\tif (key === \"dir\") {\n\t\tif (!path || typeof path !== \"string\")\n\t\t\tthrow new AstroError(`'${key}' path is invalid!`, path);\n\t}\n\n\tif (!path) path = base;\n\n\t// Check if path is a file URL\n\tif (path.startsWith(\"file:/\")) {\n\t\tpath = fileURLToPath(path);\n\t}\n\n\t// Check if path is relative\n\tif (!isAbsolute(path)) {\n\t\tpath = resolve(base, path);\n\t}\n\n\t// Check if path is a file\n\tif (extname(path)) {\n\t\tif (log === \"verbose\")\n\t\t\tlogger.warn(`'${key}' is a file, using file's directory instead`);\n\t\tpath = dirname(path);\n\t}\n\n\t// Check if path exists\n\tif (!existsSync(path)) {\n\t\tthrow new AstroError(`'${key}' path does not exist!`, path);\n\t}\n\n\treturn path;\n}\n","import type { AstroIntegration } from \"astro\";\nimport addPageDir, { type IntegrationOption, type Option } from \"./utility.js\";\n\nexport default function (...options: (string | Option)[]): AstroIntegration {\n\treturn {\n\t\tname: \"astro-pages\",\n\t\thooks: {\n\t\t\t\"astro:config:setup\": ({ config, logger, injectRoute }) => {\n\t\t\t\tfor (let option of options) {\n\t\t\t\t\tconst defaults = {\n\t\t\t\t\t\tconfig,\n\t\t\t\t\t\tlogger,\n\t\t\t\t\t};\n\n\t\t\t\t\tif (typeof option === \"string\") {\n\t\t\t\t\t\toption = {\n\t\t\t\t\t\t\tdir: option,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!option || !option?.dir || typeof option?.dir !== \"string\") {\n\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t`Skipping invalid option \"${JSON.stringify(option, null, 4)}\"`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tObject.assign(defaults, option);\n\n\t\t\t\t\tconst { injectPages } = addPageDir(defaults as IntegrationOption);\n\n\t\t\t\t\tinjectPages(injectRoute);\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t};\n}\n","import integration from \"./integration.js\";\nimport addPageDir, { type IntegrationOption, type Option } from \"./utility.js\";\n\nexport type { IntegrationOption, Option };\n\nexport { addPageDir };\n\nexport default integration;\n"],"mappings":"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","names":["existsSync","dirname","extname","isAbsolute","resolve","fileURLToPath","AstroError","fg","GLOB_PAGES","utility_default","options","dir","cwd","glob","transformer","log","config","logger","srcDir","stringToDir","entrypoints","pages","entrypoint","pattern","injectPages","injectRoute","option","key","base","path","integration_default","options","config","logger","injectRoute","option","defaults","injectPages","utility_default","src_default","integration_default"]}