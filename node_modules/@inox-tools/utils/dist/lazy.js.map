{"version":3,"sources":["../src/lazy.ts"],"names":["Lazy","factory"],"mappings":"AAMO,MAAMA,CAAQ,CAGZ,WAAA,CAAoBC,CAAkB,CAAA,CAAlB,aAAAA,EAAmB,CAFvC,WAAc,CAAA,CAAA,CAAA,CACd,MAGR,OAAc,EAAA,CAAMA,CAA2B,CAAA,CAC9C,OAAO,IAAI,IAAA,CAAKA,CAAO,CACxB,CAEO,GAAS,EAAA,CACf,OAAK,IAAA,CAAK,cACT,IAAK,CAAA,KAAA,CAAQ,IAAK,CAAA,OAAA,GAClB,IAAK,CAAA,WAAA,CAAc,CAGb,CAAA,CAAA,CAAA,IAAA,CAAK,KACb,CACD","file":"lazy.js","sourcesContent":["/**\n * A lazily computed memoized value.\n *\n * The given factory is only constructed on first use of the value.\n * Any subsequent use retrieves the same instance of the value.\n */\nexport class Lazy<T> {\n\tprivate initialized = false;\n\tprivate value?: T;\n\tprivate constructor(private factory: () => T) {}\n\n\tpublic static of<T>(factory: () => T): Lazy<T> {\n\t\treturn new this(factory);\n\t}\n\n\tpublic get(): T {\n\t\tif (!this.initialized) {\n\t\t\tthis.value = this.factory();\n\t\t\tthis.initialized = true;\n\t\t}\n\n\t\treturn this.value!;\n\t}\n}\n"]}