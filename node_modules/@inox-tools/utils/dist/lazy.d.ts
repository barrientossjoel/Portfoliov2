/**
 * A lazily computed memoized value.
 *
 * The given factory is only constructed on first use of the value.
 * Any subsequent use retrieves the same instance of the value.
 */
declare class Lazy<T> {
    private factory;
    private initialized;
    private value?;
    private constructor();
    static of<T>(factory: () => T): Lazy<T>;
    get(): T;
}

export { Lazy };
